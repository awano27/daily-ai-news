#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fix GitHub Pages - GitHub Pages設定とビルドの緊急修正
"""
import subprocess
import os
from datetime import datetime

def run_git_command(cmd, description):
    """Gitコマンドを実行"""
    print(f"🔄 {description}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"✅ {description} - 成功")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"❌ {description} - 失敗: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ {description} - エラー: {e}")
        return False

def create_simple_index():
    """シンプルなindex.htmlを作成"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S JST')
    
    html_content = f"""<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Daily AI News - {timestamp}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }}
        .status {{ background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745; }}
        .info {{ background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 10px 0; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>🚀 Enhanced Daily AI News</h1>
        <p>Powered by Gemini URL Context API</p>
    </div>
    
    <div class="status">
        <h2>✅ システム状況</h2>
        <p><strong>最終更新:</strong> {timestamp}</p>
        <p><strong>ステータス:</strong> Enhanced System デプロイ完了</p>
        <p><strong>Gemini API:</strong> 統合済み</p>
        <p><strong>X投稿処理:</strong> 重複除去・300文字要約対応</p>
    </div>
    
    <div class="info">
        <h2>🔧 システム機能</h2>
        <ul>
            <li>🧠 <strong>Gemini URL Context</strong>: AI による高度な内容分析</li>
            <li>❌ <strong>重複除去</strong>: ハッシュベース + 類似度分析</li>  
            <li>📝 <strong>300文字要約</strong>: 読みやすい簡潔な要約</li>
            <li>⭐ <strong>重要度ランキング</strong>: AI判定による優先表示</li>
            <li>🔄 <strong>自動カテゴリ分類</strong>: AI技術/ビジネス/開発ツール</li>
            <li>🕐 <strong>自動実行</strong>: 毎日07:00・19:00 JST</li>
        </ul>
    </div>
    
    <div class="info">
        <h2>📊 GitHub Actions Status</h2>
        <p>GitHub Actions でのビルドプロセスを確認してください:</p>
        <ul>
            <li><a href="https://github.com/awano27/daily-ai-news-pages/actions" target="_blank">🔗 GitHub Actions</a></li>
            <li><a href="https://github.com/awano27/daily-ai-news-pages/settings/pages" target="_blank">🔗 Pages Settings</a></li>
            <li><a href="https://github.com/awano27/daily-ai-news-pages/settings/secrets/actions" target="_blank">🔗 Secrets Settings</a></li>
        </ul>
    </div>
    
    <div class="info">
        <h2>🚨 トラブルシューティング</h2>
        <p>サイトが自動更新されない場合の確認事項:</p>
        <ol>
            <li><strong>GEMINI_API_KEY</strong> がSecrets に正しく設定されているか</li>
            <li><strong>GitHub Pages</strong> が main branch に設定されているか</li>
            <li><strong>Workflow permissions</strong> が Read and write に設定されているか</li>
            <li><strong>GitHub Actions</strong> が正常に実行されているか</li>
        </ol>
    </div>
    
    <div class="info">
        <h2>📱 次回更新予定</h2>
        <p>次回の自動更新は以下の時刻です:</p>
        <ul>
            <li>🌅 毎日 07:00 JST</li>
            <li>🌆 毎日 19:00 JST</li>
        </ul>
        <p><small>手動実行も GitHub Actions から可能です。</small></p>
    </div>
    
    <hr>
    <p><small>
        Generated by Enhanced AI News System v2.0<br>
        Last build: {timestamp}<br>
        <a href="https://github.com/awano27/daily-ai-news-pages">GitHub Repository</a>
    </small></p>
</body>
</html>"""
    
    try:
        with open("index.html", "w", encoding="utf-8") as f:
            f.write(html_content)
        print("✅ 緊急用 index.html を作成しました")
        return True
    except Exception as e:
        print(f"❌ index.html 作成エラー: {e}")
        return False

def create_github_pages_config():
    """GitHub Pages用の設定ファイルを作成"""
    
    # .nojekyll ファイル (Jekyll無効化)
    try:
        with open(".nojekyll", "w") as f:
            f.write("# Disable Jekyll processing")
        print("✅ .nojekyll ファイルを作成")
    except Exception as e:
        print(f"❌ .nojekyll 作成エラー: {e}")
    
    # CNAME ファイル (カスタムドメインがある場合)
    # 今回は不要なのでスキップ

def create_minimal_workflow():
    """最小限の動作するワークフローを作成"""
    workflow_content = """name: Minimal Build Test
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Test build
        run: |
          echo "🧪 Minimal build test"
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # 最小限のHTMLを生成
          cat > test_build.html << 'EOF'
<!DOCTYPE html>
<html>
<head><title>Build Test</title></head>
<body>
<h1>Build Test Success</h1>
<p>Generated at: $(date)</p>
</body>
</html>
EOF
          
          echo "✅ Test HTML created"
          
      - name: Deploy
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add test_build.html || true
          git commit -m "🧪 Minimal build test $(date)" || echo "No changes"
          git push || echo "Push failed"
"""
    
    try:
        os.makedirs(".github/workflows", exist_ok=True)
        with open(".github/workflows/minimal-build.yml", "w", encoding="utf-8") as f:
            f.write(workflow_content)
        print("✅ 最小限ワークフロー作成")
        return True
    except Exception as e:
        print(f"❌ ワークフロー作成エラー: {e}")
        return False

def main():
    """緊急修正の実行"""
    print("🚨 GitHub Pages Emergency Fix")
    print("=" * 50)
    print(f"実行時刻: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # 1. 緊急用index.html作成
    create_simple_index()
    
    # 2. GitHub Pages設定ファイル作成
    create_github_pages_config() 
    
    # 3. 最小限ワークフロー作成
    create_minimal_workflow()
    
    # 4. すべてをコミット・プッシュ
    print("\n📝 緊急修正をコミット・プッシュ:")
    
    commands = [
        ("git add index.html .nojekyll .github/workflows/minimal-build.yml", "緊急修正ファイルをステージング"),
        ("git commit -m \"🚨 Emergency fix: Add minimal index.html and workflow\"", "緊急修正をコミット"),
        ("git push origin main", "緊急修正をプッシュ")
    ]
    
    for cmd, desc in commands:
        if not run_git_command(cmd, desc):
            print(f"⚠️ {desc} に失敗しましたが、続行します")
    
    print("\n" + "=" * 50)
    print("🎯 緊急修正完了!")
    print()
    print("📋 確認手順:")
    print("1. 5-10分待ってからサイトを更新してください")
    print("2. GitHub Actions タブで実行状況を確認")  
    print("3. Settings → Pages で設定を確認")
    print("4. Settings → Secrets → Actions で API key を確認")
    print()
    print("🌐 サイトURL: https://awano27.github.io/daily-ai-news-pages/")
    print()
    
    if os.path.exists("index.html"):
        print("✅ index.html が作成されました")
        print("📊 このページが表示されれば GitHub Pages は正常に動作しています")
    
    print("\n💡 次のステップ:")
    print("- Enhanced Daily AI News ワークフローが動作するか確認")
    print("- エラーがあればログを確認して修正")
    print("- 全体が正常に動作すれば定期実行が開始されます")

if __name__ == "__main__":
    main()
    input("Press Enter to exit...")