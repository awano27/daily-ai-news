name: Build from CSV and Deploy to Public Pages

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 22 * * *"   # 07:00 JST
  workflow_dispatch:
    inputs:
      csv_url:
        description: "CSV URL (Google Sheets export)"
        required: false
        default: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRk9zTaFaUyY7HImC-G2mdSqCjdl0P4jLFd_NtVKuMvnTjQyjQJ0_MLGAUbOFKs7Hdmix3OP413Rui8/pub?output=csv"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "csv-to-public-pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Tokyo
      TRANSLATE_TO_JA: "1"
      TRANSLATE_ENGINE: "google"
      HOURS_LOOKBACK: "36"
      MAX_ITEMS_PER_CATEGORY: "20"
      X_POSTS_CSV: ${{ github.event.inputs.csv_url || 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRk9zTaFaUyY7HImC-G2mdSqCjdl0P4jLFd_NtVKuMvnTjQyjQJ0_MLGAUbOFKs7Hdmix3OP413Rui8/pub?output=csv' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore translation cache
        uses: actions/cache@v4
        with:
          path: _cache
          key: translation-cache-${{ github.run_id }}
          restore-keys: |
            translation-cache-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || {
            echo "⚠️ Failed to install from requirements.txt, using fallback..."
            pip install feedparser pyyaml deep-translator==1.11.4 beautifulsoup4 requests google-generativeai>=0.3.0 python-dateutil>=2.8.0
          }

      - name: Verify CSV accessibility
        timeout-minutes: 2
        run: |
          echo "🔍 Testing CSV accessibility..."
          if curl -s -L -A "Mozilla/5.0" --connect-timeout 30 --max-time 60 "$X_POSTS_CSV" | head -1 > /dev/null; then
            echo "✅ CSV is accessible"
          else
            echo "⚠️ CSV may be temporarily unavailable, but continuing..."
          fi

      - name: Build AI News Site from CSV
        timeout-minutes: 15
        continue-on-error: false
        run: |
          set -e
          echo "Building AI News site (CSV: $X_POSTS_CSV)"

          # Run build with retry logic
          max_retries=2
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if python build.py; then
              echo "✅ Build completed successfully"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "⚠️ Build failed, retrying ($retry_count/$max_retries)..."
                sleep 10
              else
                echo "❌ Build failed after $max_retries attempts"
                exit 1
              fi
            fi
          done

          # Note: generate_comprehensive_dashboard.py is disabled to preserve modern_index_template.html format
          # If you want the dashboard format, uncomment the lines below:
          # echo "Generating enhanced dashboard landing page..."
          # if python generate_comprehensive_dashboard.py; then
          #   echo "✅ Dashboard generation completed."
          # else
          #   echo "⚠️ Dashboard generation failed; the classic layout will be used." >&2
          # fi

          echo "Verifying build output..."
          if [ ! -f "index.html" ] && [ -f "news_detail.html" ]; then
            echo "index.html missing – falling back to news_detail.html"
            cp -f news_detail.html index.html
          fi

          if [ -f "index.html" ]; then
            file_size=$(stat -c%s index.html 2>/dev/null || stat -f%z index.html 2>/dev/null || echo 0)
            echo "✅ index.html generated (${file_size} bytes)"

            # Verify HTML is valid
            if grep -q "<html" index.html && grep -q "</html>" index.html; then
              echo "✅ HTML structure validated"
            else
              echo "⚠️ HTML structure may be incomplete"
            fi
          else
            echo "❌ index.html not generated!"
            exit 1
          fi
      - name: Prepare outputs
        run: |
          rm -rf outputs || true
          mkdir -p outputs

          # Ensure style.css is the latest version from repository
          echo "📋 Verifying style.css..."
          if [ -f "style.css" ]; then
            style_lines=$(wc -l < style.css)
            style_size=$(stat -c%s style.css 2>/dev/null || stat -f%z style.css 2>/dev/null || echo 0)
            echo "✅ style.css: ${style_lines} lines, ${style_size} bytes"
          else
            echo "❌ style.css not found!"
            exit 1
          fi

          cp -v index.html outputs/
          cp -v style.css outputs/
          cp -v news_detail.html outputs/ || true
          touch outputs/.nojekyll

          echo "📦 Output files:"
          ls -lh outputs/

          # Verify style.css was copied correctly
          if [ -f "outputs/style.css" ]; then
            output_lines=$(wc -l < outputs/style.css)
            echo "✅ outputs/style.css: ${output_lines} lines"
            if [ "$style_lines" != "$output_lines" ]; then
              echo "❌ ERROR: Line count mismatch! Source: $style_lines, Output: $output_lines"
              exit 1
            fi
          else
            echo "❌ style.css not copied to outputs!"
            exit 1
          fi

      - name: Verify PERSONAL_TOKEN access
        env:
          TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          echo "🔐 Verifying PERSONAL_TOKEN permissions..."

          if [ -z "$TOKEN" ]; then
            echo "❌ PERSONAL_TOKEN is not set!"
            echo "Please add PERSONAL_TOKEN to repository secrets:"
            echo "  Settings > Secrets and variables > Actions > New repository secret"
            exit 1
          fi

          # Test token by checking access to target repo
          response=$(curl -s -w "%{http_code}" -o /tmp/token_test.json \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/awano27/daily-ai-news-pages")

          if [ "$response" = "200" ]; then
            echo "✅ PERSONAL_TOKEN is valid and has access to target repository"
          elif [ "$response" = "401" ]; then
            echo "❌ PERSONAL_TOKEN is invalid or expired!"
            echo "Please regenerate your Personal Access Token:"
            echo "  GitHub Settings > Developer settings > Personal access tokens > Tokens (classic)"
            echo "  Required scopes: repo (Full control of private repositories)"
            exit 1
          elif [ "$response" = "404" ]; then
            echo "❌ PERSONAL_TOKEN does not have access to awano27/daily-ai-news-pages"
            echo "Please check:"
            echo "  1. Token has 'repo' scope"
            echo "  2. Token owner has write access to target repository"
            exit 1
          else
            echo "⚠️ Unexpected response code: $response"
            cat /tmp/token_test.json
            exit 1
          fi

      - name: Debug X CSV structure
        env:
          X_POSTS_CSV: ${{ env.X_POSTS_CSV }}
        run: |
          echo "🔍 X_POSTS_CSV=$X_POSTS_CSV"
          curl -s -L -A "Mozilla/5.0" "$X_POSTS_CSV" | head -3 || true
          echo ""
          echo "🔗 Looking for x.com/twitter.com URLs in CSV..."
          curl -s -L -A "Mozilla/5.0" "$X_POSTS_CSV" | grep -E -o "https://[^,]*(x\.com|twitter\.com)[^,]*" | head -5 || echo "No x.com/twitter.com URLs found"

      - name: Verify X posts in HTML
        run: |
          echo "🔎 Checking X cards and titles in generated HTML..."
          count_x_at=$(grep -c "X @" index.html || true)
          count_bird=$(grep -c "🐦 @" index.html || true)
          echo "X @ cards: $count_x_at"
          echo "🐦 @ titles: $count_bird"
          if [ "$count_x_at" -eq 0 ] && [ "$count_bird" -eq 0 ]; then
            echo "⚠️ No X markers found in HTML. Dumping samples:"
            grep -n "@" index.html | head -10 || true
            grep -n "🐦" index.html | head -10 || true
          fi

      - name: Deploy to public repository
        id: deploy
        uses: peaceiris/actions-gh-pages@v4
        continue-on-error: false
        with:
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          external_repository: awano27/daily-ai-news-pages
          publish_branch: gh-pages
          publish_dir: ./outputs
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy from CSV: ${{ github.sha }}'
          keep_files: false
          enable_jekyll: false
          force_orphan: false

      - name: Verify deployment was committed
        run: |
          echo "🔍 Verifying deployment to awano27/daily-ai-news-pages..."
          sleep 5

          # Check if the deployment actually happened by fetching the latest commit
          latest_commit=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/awano27/daily-ai-news-pages/commits/gh-pages" \
            | grep '"sha"' | head -1 | cut -d'"' -f4)

          if [ -n "$latest_commit" ]; then
            echo "✅ Latest commit in target repo: $latest_commit"

            # Check commit timestamp
            commit_date=$(curl -s -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/awano27/daily-ai-news-pages/commits/$latest_commit" \
              | grep '"date"' | head -1)
            echo "📅 Commit date: $commit_date"
          else
            echo "❌ Could not verify deployment commit!"
            echo "⚠️ This might indicate a PERSONAL_TOKEN issue or permissions problem"
            exit 1
          fi

      - name: Verify deployment
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Public site: https://awano27.github.io/daily-ai-news-pages/"
          echo "📊 Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Report failure
        if: failure()
        run: |
          echo "❌ Workflow failed!"
          echo "📝 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "Common issues:"
          echo "  - Translation API rate limits"
          echo "  - CSV file temporarily unavailable"
          echo "  - Network connectivity issues"
          echo "  - Deployment token expired"




